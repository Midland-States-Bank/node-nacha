// Generated by CoffeeScript 1.11.1
var edit, from, isEftObject, isStream, strung, to, transforms;

strung = require('strung');

isStream = require('./is-stream');

isEftObject = require('./is-eft-object');

transforms = require('../transforms');

edit = require('./edit');

to = require('./to');

toObject = require('./toObject');

module.exports = from = function(options) {
  var From, errorProvider, source, transform;
  if (options == null) {
    options = {};
  }
  if ('string' === typeof options && transforms.getParser(options)) {
    options = {
      format: options,
      source: process.stdin
    };
  } else if (isStream(options)) {
    options = {
      format: 'ach',
      source: options
    };
  }
  from = {
    streams: []
  };
  if ((options != null ? options.source : void 0) != null) {
    from.streams.unshift(source = isStream(options.source) ? options.source : 'string' === typeof options.source ? strung(options.source) : isEftObject(options.source) ? objectable(options.source) : process.stdin);
  } else {
    from.streams.unshift(process.stdin);
  }
  if (options.format == null) {
    options.format = 'ach';
  }
  transform = transforms.getParser(options.format);
  if (transform == null) {
    return errorProvider = {
      error: 'invalid \'from\' format: ' + options.format,
      edit: function() {
        return this;
      },
      to: function() {
        return this;
      }
    };
  } else {
    from.streams.unshift(transform);
  }
  return From = {
    edit: edit.bind(from),
    to: to.bind(from),
    toObject: toObject.bind(from)
  };
};
