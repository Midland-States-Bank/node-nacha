// Generated by CoffeeScript 1.11.1
var edit, from, isEftObject, isStream, strung, to, formatters;

strung = require('strung');

isStream = require('./is-stream');

isEftObject = require('./is-eft-object');

transforms = require('../transforms');

create = require('./create');

to = require('./to');

module.exports = from = (options) => {
  if(options == null) throw new Error('options is required')

  if(typeof options === 'string'){

    try {
      JSON.parse(options)

      options = {
        format: 'json',
        source: options
      }
    } catch (error) {
      options = {
        format: 'ach',
        source: options
      }
    }
  }

  else if(typeof options === 'object') {
    options = {
      format: 'object',
      source: options
    }
  }
  
  let { format, source } = options

  if(format === 'object'){

    let data
    try {
      const achObj = create(source)
      
      data = achObj.object
      
    } catch (error) {
      try {
        to('json')
        data = source

      } catch (error) {
        throw new Error(`Failed to create ACH file from input`)
      }
    }
    
    return {
      data: data,
      to: to
    }
  }

  let parser = transforms.getParser(format)

  if(!parser) throw new Error(`Not a valid format ${format}`)



  return {
    data: parser(source),
    to: to
  }

}

/* module.exports = from = function(options) {
  var From, errorProvider, source, transform;
  if (options == null) {
    options = {};
  }
  if ('string' === typeof options && transforms.getParser(options)) {
    options = {
      format: options,
      source: process.stdin
    };
  } else if (isStream(options)) {
    options = {
      format: 'ach',
      source: options
    };
  }
  from = {
    streams: []
  };
  if ((options != null ? options.source : void 0) != null) {
    from.streams.unshift(source = isStream(options.source) ? options.source : 'string' === typeof options.source ? strung(options.source) : isEftObject(options.source) ? objectable(options.source) : process.stdin);
  } else {
    from.streams.unshift(process.stdin);
  }
  if (options.format == null) {
    options.format = 'ach';
  }
  transform = transforms.getParser(options.format);
  if (transform == null) {
    return errorProvider = {
      error: 'invalid \'from\' format: ' + options.format,
      edit: function() {
        return this;
      },
      to: function() {
        return this;
      }
    };
  } else {
    from.streams.unshift(transform);
  }
  return From = {
    edit: edit.bind(from),
    to: to.bind(from),
    toObject: toObject.bind(from)
  };
}; */
